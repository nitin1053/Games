import random

class PrisonersDilemma:
    def __init__(self):
        self.payoff_matrix = {
            ("cooperate", "cooperate"): (3, 3),
            ("cooperate", "defect"): (0, 5),
            ("defect", "cooperate"): (5, 0),
            ("defect", "defect"): (1, 1)
        }
    
    def play_round(self, action1, action2):
        return self.payoff_matrix[(action1, action2)]

    def incentivize_cooperation(self, rounds):
        player1_score = 0
        player2_score = 0
        for _ in range(rounds):
            action_player1 = "cooperate"
            action_player2 = "cooperate"
            if random.random() < 0.5:  # Randomly choose to defect with 50% probability
                action_player1 = "defect"
            if random.random() < 0.5:  # Randomly choose to defect with 50% probability
                action_player2 = "defect"
            payoff_player1, payoff_player2 = self.play_round(action_player1, action_player2)
            player1_score += payoff_player1
            player2_score += payoff_player2
        return player1_score, player2_score

# Example usage:
game = PrisonersDilemma()
player1_score, player2_score = game.incentivize_cooperation(1000)
print("Player 1 total score:", player1_score)
print("Player 2 total score:", player2_score)


#2 way
# Payoff matrix
payoff_matrix = {
    ('C', 'C'): (3, 3),  # Both cooperate
    ('C', 'D'): (0, 5),  # Player 1 cooperates, Player 2 defects
    ('D', 'C'): (5, 0),  # Player 1 defects, Player 2 cooperates
    ('D', 'D'): (1, 1)   # Both defect
}

# Define strategies
strategies = {
    'C': 'Cooperate',
    'D': 'Defect'
}

# Function to find Nash equilibrium
def find_nash_equilibrium(payoff_matrix):
    nash_equilibrium = []

    for strategy_p1 in strategies:
        for strategy_p2 in strategies:
            if (payoff_matrix[(strategy_p1, strategy_p2)] >= payoff_matrix[(strategy_p1, strategies[strategy_p2])] and
                payoff_matrix[(strategy_p1, strategy_p2)] >= payoff_matrix[(strategies[strategy_p1], strategy_p2)]):
                nash_equilibrium.append((strategy_p1, strategy_p2))

    return nash_equilibrium

# Print Nash equilibrium
nash_equilibrium = find_nash_equilibrium(payoff_matrix)
print("Pure Strategy Nash Equilibrium(s):")
for equilibrium in nash_equilibrium:
    print("Player 1:", strategies[equilibrium[0]], "| Player 2:", strategies[equilibrium[1]])
